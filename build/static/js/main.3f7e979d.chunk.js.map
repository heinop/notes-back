{"version":3,"sources":["components/Note.js","components/Notification.js","components/Footer.js","services/notes.js","App.js","index.js"],"names":["Note","note","toggleImportance","label","important","className","content","onClick","Notification","message","Footer","style","color","fontStyle","fontSize","request","axios","get","nonExisting","id","date","then","response","data","concat","newObject","post","console","log","put","App","useState","notes","setNotes","newNote","setNewNote","showAll","setShowAll","errorMessage","setErrorMessage","useEffect","noteService","initialNotes","length","notesToShow","filter","map","key","find","n","changedNote","returnedNote","catch","error","setTimeout","toggleImportanceOf","onSubmit","event","preventDefault","noteObject","Date","toISOString","Math","random","value","onChange","target","type","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.3f7e979d.chunk.js","sourcesContent":["import React from 'react'\n\nconst Note = ({ note, toggleImportance }) => {\n  const label = note.important\n    ? 'make not important'\n    : 'make important'\n\n  return (\n    <li className='note'>\n      {note.content}\n      <button onClick={toggleImportance}>{label}</button>\n    </li>\n  )\n}\n\nexport default Note","import React from 'react'\n\nconst Notification = ({ message }) => {\n  if (message === null) {\n    return null\n  }\n\n  return (\n    <div className=\"error\">\n      {message}\n    </div>\n  )\n}\n\nexport default Notification","import React from 'react'\n\nconst Footer = () => {\n  const footerStyle = {\n    color: 'green',\n    fontStyle: 'italic',\n    fontSize: 16\n  }\n\n  return (\n    <div style={footerStyle}>\n      <br />\n      <em>Note app, Department of Computer Science, University of Helsinki 2020</em>\n    </div>\n  )\n}\n\nexport default Footer","import axios from 'axios'\n\n// const baseUrl = 'http://localhost:3001/api/notes'\nconst baseUrl = '/api/notes'\n\nconst getAll = () => {\n  const request = axios.get(baseUrl)\n  const nonExisting = {\n    id: 10000,\n    content: 'This note is not saved to server',\n    date: '2019-05-30T17:30:31.098Z',\n    important: true,\n  }\n  return request.then(response => response.data.concat(nonExisting))\n}\n\nconst create = (newObject) => {\n  const request = axios.post(baseUrl, newObject)\n  return request.then(response => response.data)\n}\n\nconst update = (id, newObject) => {\n  console.log('Updating object', id)\n  const request = axios.put(`${baseUrl}/${id}`, newObject)\n  return request.then(response => response.data)\n}\n\nexport default { getAll, create, update }","import React, { useState, useEffect } from 'react'\nimport Note from './components/Note'\nimport Notification from './components/Notification'\nimport Footer from './components/Footer'\nimport noteService from './services/notes'\n\nconst App = () => {\n  const [notes, setNotes] = useState([]);\n  const [newNote, setNewNote] = useState('a new note...');\n  const [showAll, setShowAll] = useState(true);\n  const [errorMessage, setErrorMessage] = useState(null);\n\n  useEffect(() => {\n    console.log('effect');\n    noteService\n      .getAll()\n      .then(initialNotes => {\n        setNotes(initialNotes);\n      })\n  }, []);\n  console.log('render', notes.length, 'notes');\n\n  const addNote = (event) => {\n    event.preventDefault()\n    const noteObject = {\n      content: newNote,\n      date: new Date().toISOString(),\n      important: Math.random() > 0.5,\n    }\n\n    noteService\n      .create(noteObject)\n      .then(returnedNote => {\n        setNotes(notes.concat(returnedNote))\n        setNewNote('')\n      })\n  }\n\n  const handleNoteChange = (event) => {\n    console.log(event.target.value)\n    setNewNote(event.target.value)\n  }\n\n  const toggleImportanceOf = (id) => {\n    const note = notes.find(n => n.id === id)\n    const changedNote = { ...note, important: !note.important }\n\n    console.log('Changed note', changedNote)\n    noteService\n      .update(id, changedNote)\n      .then(returnedNote => {\n        setNotes(notes.map(note => note.id !== id ? note : returnedNote))\n      })\n      .catch(error => {\n        setErrorMessage(\n          `Note '${note.content}' was already removed from server`\n        )\n        setTimeout(() => {\n          setErrorMessage(null)\n        }, 5000)\n        setNotes(notes.filter(note => note.id !== id))\n      })\n  }\n\n  const notesToShow = showAll\n    ? notes\n    : notes.filter(note => note.important)\n\n  return (\n    <div>\n      <h1>Notes</h1>\n      <Notification message={errorMessage} />\n      <div>\n        <button onClick={() => setShowAll(!showAll)}>\n          show {showAll ? 'important' : 'all'}\n        </button>\n      </div>\n      <ul>\n        {notesToShow.map(note =>\n          <Note\n            key={note.id}\n            note={note}\n            toggleImportance={() => toggleImportanceOf(note.id)}\n          />\n        )}\n      </ul>\n      <form onSubmit={addNote}>\n        <input value={newNote} onChange={handleNoteChange} />\n        <button type=\"submit\">save</button>\n      </form>\n      <Footer />\n    </div>\n  )\n}\n\nexport default App","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css'\n\nReactDOM.render(\n  <App />, document.getElementById('root')\n);\n"],"sourceRoot":""}